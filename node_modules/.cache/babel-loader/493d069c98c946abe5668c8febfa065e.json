{"ast":null,"code":"import _classCallCheck from \"/Users/beverlyackah/Documents/MyReactProjects/rta_v4/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/beverlyackah/Documents/MyReactProjects/rta_v4/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/beverlyackah/Documents/MyReactProjects/rta_v4/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/beverlyackah/Documents/MyReactProjects/rta_v4/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/beverlyackah/Documents/MyReactProjects/rta_v4/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/beverlyackah/Documents/MyReactProjects/rta_v4/src/components/MapContainer.js\";\nimport React, { Component } from 'react';\nimport { Map, GoogleApiWrapper, InfoWindow, Marker, google } from 'google-maps-react';\nimport { connect } from 'react-redux';\nvar mapStyles = {\n  width: '50%',\n  height: '60%'\n};\n\nvar MapContainer =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(MapContainer, _Component);\n\n  function MapContainer() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, MapContainer);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(MapContainer)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      showingInfoWindow: false,\n      //Hides or the shows the infoWindow\n      activeMarker: {},\n      //Shows the active marker upon click\n      selectedPlace: {} //Shows the infoWindow to the selected place upon a marker\n\n    };\n\n    _this.onMarkerClick = function (props, marker, e) {\n      return _this.setState({\n        selectedPlace: props,\n        activeMarker: marker,\n        showingInfoWindow: true\n      });\n    };\n\n    _this.onClose = function (props) {\n      if (_this.state.showingInfoWindow) {\n        _this.setState({\n          showingInfoWindow: false,\n          activeMarker: null\n        });\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(MapContainer, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      if (this.props.markerLocations) {\n        var locations = this.props.markerLocations; // console.log(\"THE LOC \",locations.from)\n\n        var markers = [];\n        var from = this.getLocationCoordinates(locations.from);\n        var to = this.getLocationCoordinates(locations.to);\n        markers.push(from);\n        markers.push(to);\n      }\n    }\n  }, {\n    key: \"getLocationCoordinates\",\n    value: function getLocationCoordinates(location) {\n      var geocoder = new window.google.maps.Geocoder();\n      geocoder.geocode({\n        address: location\n      }, function (result, status) {\n        if (status == 'OK') {\n          var geometry = result[0].geometry.location;\n          var coordinates = {\n            lat: geometry.lat(),\n            lng: geometry.lng()\n          };\n          console.log(\"THE COORDINATES FOR FROM \", coordinates);\n          return coordinates;\n        }\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(Map, {\n        google: this.props.google,\n        zoom: 14,\n        style: mapStyles,\n        initialCenter: {\n          lat: -1.2884,\n          lng: 36.8233\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }, React.createElement(Marker, {\n        onClick: this.onMarkerClick,\n        name: 'Kenyatta International Convention Centre',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      }), React.createElement(InfoWindow, {\n        marker: this.state.activeMarker,\n        visible: this.state.showingInfoWindow,\n        onClose: this.onClose,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83\n        },\n        __self: this\n      }, React.createElement(\"h4\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        },\n        __self: this\n      }, this.state.selectedPlace.name))));\n    }\n  }]);\n\n  return MapContainer;\n}(Component);\n\nfunction mapStateToProps(state) {\n  return {\n    markerLocations: state.mapReducer.data\n  };\n}\n\nexport var mapped = connect(mapStateToProps)(MapContainer);\nexport default GoogleApiWrapper({\n  apiKey: 'AIzaSyC64eUv-Iw47Q9MqhsnpgzpvCUm-SM1qi4'\n})(mapped);","map":{"version":3,"sources":["/Users/beverlyackah/Documents/MyReactProjects/rta_v4/src/components/MapContainer.js"],"names":["React","Component","Map","GoogleApiWrapper","InfoWindow","Marker","google","connect","mapStyles","width","height","MapContainer","state","showingInfoWindow","activeMarker","selectedPlace","onMarkerClick","props","marker","e","setState","onClose","markerLocations","locations","markers","from","getLocationCoordinates","to","push","location","geocoder","window","maps","Geocoder","geocode","address","result","status","geometry","coordinates","lat","lng","console","log","name","mapStateToProps","mapReducer","data","mapped","apiKey"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Map, GoogleApiWrapper, InfoWindow, Marker, google  } from 'google-maps-react';\nimport {connect} from 'react-redux'\n\nconst mapStyles = {\n  width: '50%',\n  height: '60%'\n};\n\n class MapContainer extends Component {\n    state = {\n        showingInfoWindow: false,  //Hides or the shows the infoWindow\n        activeMarker: {},          //Shows the active marker upon click\n        selectedPlace: {}          //Shows the infoWindow to the selected place upon a marker\n      };\n      onMarkerClick = (props, marker, e) =>\n    this.setState({\n      selectedPlace: props,\n      activeMarker: marker,\n      showingInfoWindow: true\n    });\n\n  onClose = props => {\n    if (this.state.showingInfoWindow) {\n      this.setState({\n        showingInfoWindow: false,\n        activeMarker: null\n      });\n    }\n  };\n\n  componentWillMount(){\n    if(this.props.markerLocations ){\n      const locations = this.props.markerLocations;\n      // console.log(\"THE LOC \",locations.from)\n     \n      const markers = [];\n      const from = this.getLocationCoordinates(locations.from);\n      const to = this.getLocationCoordinates(locations.to);\n      markers.push(from);\n      markers.push(to);\n    }\n   \n  }\n\n   getLocationCoordinates(location){\n    const geocoder = new window.google.maps.Geocoder();\n    geocoder.geocode({address:location}, (result, status)=>{\n      if(status=='OK'){\n        const geometry = result[0].geometry.location\n        const coordinates = {\n          lat: geometry.lat(),\n          lng:geometry.lng()\n        }\n        console.log(\"THE COORDINATES FOR FROM \", coordinates)\n        return coordinates\n       \n      }\n    }) \n  }\n\n\n    render() {\n      return (\n        <Map\n          google={this.props.google}\n          zoom={14}\n          style={mapStyles}\n          initialCenter={{\n           lat: -1.2884,\n           lng: 36.8233\n          }}\n        >\n        <Marker\n          onClick={this.onMarkerClick}\n          name={'Kenyatta International Convention Centre'}\n        />\n        <InfoWindow\n          marker={this.state.activeMarker}\n          visible={this.state.showingInfoWindow}\n          onClose={this.onClose}\n        >\n          <div>\n            <h4>{this.state.selectedPlace.name}</h4>\n          </div>\n        </InfoWindow>\n      </Map>\n\n        \n      );\n    }\n\n  }\n\n  function mapStateToProps(state){\n    \n    return {\n      markerLocations: state.mapReducer.data\n    }\n  }\n\n  export const mapped = connect(mapStateToProps)(MapContainer)\n\n  export default GoogleApiWrapper({\n    apiKey: 'AIzaSyC64eUv-Iw47Q9MqhsnpgzpvCUm-SM1qi4'\n  })(mapped);\n  "]},"metadata":{},"sourceType":"module"}